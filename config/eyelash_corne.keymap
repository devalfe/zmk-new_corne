#include <behaviors/num_word.dtsi> // urob's num word from zkm auto layer
#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // 600, 1200
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        mmv {
            acceleration-exponent = <2>;      // 1
            time-to-max-speed-ms = <40>;    // 40
            delay-ms = <0>;                   // 0
        };

        shiftnextcaps: shiftnextcaps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&kp CAPS>;

            label = "shiftnextcaps";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;

            flavor = "balanced";
            require-prior-idle-ms = <100>;

            hold-trigger-key-positions = <13 14 15 16 17 18>;

            hold-trigger-on-release;
            quick-release;
            global-quick-tap;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;

            flavor = "balanced";
            require-prior-idle-ms = <100>;

            hold-trigger-key-positions = <22 23 24 25 26>;

            hold-trigger-on-release;
            quick-release;
            global-quick-tap;
        };

        sk_mo: sk_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MO";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        sl_mo: sl_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_MO";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BSPC DEL KP_DOT DOT COMMA KP_PLUS PLUS KP_MINUS MINUS KP_MULTIPLY STAR KP_DIVIDE FSLH EQUAL>;
            ignore-numbers;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&num_word>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <42>;
        };

        sk_kp: sk_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_KP";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "balanced";
            hold-trigger-key-positions = <28>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        cmb_back {
            bindings = <&kp BACKSPACE>;
            key-positions = <23 24>;
        };

        cmb_del {
            bindings = <&kp DEL>;
            key-positions = <24 25>;
        };

        cmb_caps {
            bindings = <&kp CAPS>;
            key-positions = <31 32>;
            layers = <0>;
        };

        smartcaps {
            bindings = <&caps_word>;
            key-positions = <16 17>;
            layers = <0>;
        };

        togbase {
            bindings = <&tog 0>;
            key-positions = <44 45>;
        };

        togmncft {
            bindings = <&tog 6>;
            key-positions = <2 3 4>;
        };

        cb-terminal {
            bindings = <&kp RC(J)>;
            key-positions = <29 14>;
        };

        cb-find {
            bindings = <&kp LC(F)>;
            key-positions = <30 15>;
        };

        cb-find-g {
            bindings = <&kp LC(LS(F))>;
            key-positions = <16 31>;
        };

        cb-replace {
            bindings = <&kp LC(H)>;
            key-positions = <17 32>;
        };

        cb-replace-g {
            bindings = <&kp LC(LS(H))>;
            key-positions = <33 18>;
        };

        cb-project {
            bindings = <&kp LC(LS(E))>;
            key-positions = <14 1>;
        };

        cb-tool-bars {
            bindings = <&kp LC(LS(B))>;
            key-positions = <15 2>;
        };

        cb-run {
            bindings = <&kp LC(LS(U))>;
            key-positions = <16 3>;
        };

        cb-files {
            bindings = <&kp LC(E)>;
            key-positions = <4 17>;
        };

        cb-goto {
            bindings = <&kp LC(P)>;
            key-positions = <5 18>;
        };
    };

    macros {
        middledot: middledot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N3>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MIDDLEDOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEVALFE";
            bindings = <
&kp ESCAPE      &kp Q            &kp W            &kp E                &kp R              &kp T                                       &kp UP_ARROW                     &kp Y         &kp U               &kp I                 &kp O                    &kp P                &kp BACKSPACE
&kp CAPSLOCK    &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                       &kp LEFT_ARROW  &kp SPACE       &kp RIGHT_ARROW  &kp H         &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L         &as COLON SEMICOLON  &as DOUBLE_QUOTES SQT
&kp LEFT_SHIFT  &kp Z            &kp X            &kp C                &kp V              &kp B       &ltq 2 SPACE                    &kp DOWN_ARROW                   &kp N         &kp M               &as LESS_THAN COMMA   &as GREATER_THAN PERIOD  &as QUESTION SLASH   &kp ENTER
                                                  &smart_num 1 0       &ltq 5 KP_ENTER    &ltq 3 TAB                                                                   &ltq 2 SPACE  &ltq 4 ENTER        &ltq 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "DEVALFE";
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&to 0  &kp LC(BACKSPACE)         &kp BACKSPACE             &kp ESCAPE                 &kp DEL                       &kp LC(DELETE)                                     &mmv MOVE_UP                     &kp KP_PLUS      &kp N7      &kp N8          &kp N9  &kp EQUAL    &trans
&none  &sk_kp LEFT_WIN LEFT_WIN  &sk_kp LEFT_ALT LEFT_ALT  &sk_kp LCTRL LEFT_CONTROL  &sk_kp LEFT_SHIFT LEFT_SHIFT  &kp C_AL_CALCULATOR                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp KP_MINUS     &kp N4      &kp N5          &kp N6  &kp N0       &none
&none  &tog 4                    &tog 2                    &tog 3                     &tog 5                        &tog 6               &kp C_MUTE                    &mmv MOVE_DOWN                   &kp KP_MULTIPLY  &kp N1      &kp N2          &kp N3  &kp PERCENT  &trans
                                                           &none                      &to 0                         &kp SPACE                                                                           &kp KP_DIVIDE    &kp KP_DOT  &kp KP_NUMLOCK
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&to 0  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR      &kp PERCENT                           &mmv MOVE_UP                     &kp AMPERSAND                &kp SLASH                      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &middledot  &trans
&none  &kp LEFT_WIN     &kp LEFT_ALT  &kp LCTRL      &kp LEFT_SHIFT  &none                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &as PLUS EQUAL               &as UNDER MINUS                &as PIPE BACKSLASH    &as TILDE GRAVE        &trans      &trans
&none  &none            &none         &kp CARET      &kp ASTRK       &none        &none                    &mmv MOVE_DOWN                   &as LEFT_BRACE LEFT_BRACKET  &as RIGHT_BRACE RIGHT_BRACKET  &trans                &trans                 &trans      &trans
                                      &kp BACKSLASH  &to 0           &kp UNDER                                                              &kp UNDERSCORE               &kp MINUS                      &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            display-name = "NAV";
            bindings = <
&to 0  &kp F1          &kp F2        &kp F3          &kp F4           &kp F5                                  &mmv MOVE_UP                     &kp LC(Y)   &kp LC(C)  &kp UP         &kp LC(V)    &kp LC(Z)  &kp F11
&none  &none           &none         &none           &none            &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LC(D)   &kp LEFT   &kp DOWN       &kp RIGHT    &kp LC(X)  &kp F12
&none  &msc SCRL_LEFT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp INSERT  &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
                                     &kp LEFT_SHIFT  &to 0            &none                                                                    &mkp LCLK   &mkp RCLK  &mkp MCLK
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "NAV";
        };

        layer_4 {
            bindings = <
&to 0           &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                &mmv MOVE_UP                     &none  &none              &none         &none  &none  &none
&bt BT_CLR      &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &none  &out OUT_USB       &out OUT_BLE  &none  &none  &none
&bt BT_CLR_ALL  &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &kp K_MUTE                    &mmv MOVE_DOWN                   &none  &ext_power EP_TOG  &bootloader   &none  &none  &trans
                                                  &none            &to 0            &none                                                                           &none  &none              &none
            >;

            label = "BLTRGB";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_5 {
            bindings = <
&to 0  &kp F10  &kp F7  &kp F8          &kp F9  &none                                &mmv MOVE_UP                     &kp C_PREVIOUS    &kp LG(A)        &kp LG(S)          &kp LG(D)      &kp LG(F)      &none
&none  &kp F11  &kp F4  &kp F5          &kp F6  &none                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp C_NEXT        &kp RIGHT_SHIFT  &kp RCTRL          &kp RIGHT_ALT  &kp RIGHT_WIN  &none
&none  &kp F12  &kp F1  &kp F2          &kp F3  &none  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp C_PLAY_PAUSE  &kp LG(Z)        &kp LG(X)          &kp LG(C)      &kp LG(V)      &trans
                        &kp LEFT_SHIFT  &to 0   &none                                                                 &none             &kp K_APP        &kp RIGHT_CONTROL
            >;

            label = "FUN";
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_6 {
            bindings = <
&kp ESC    &none   &kp E   &kp W   &kp F      &kp N1                              &mmv MOVE_UP                     &kp KP_NUMLOCK  &kp KP_NUMBER_7  &kp KP_N8  &kp KP_N9  &kp PRCNT   &none
&to 0      &kp L   &kp A   &kp S   &kp D      &kp N2              &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &mkp LCLK       &kp KP_N4        &kp KP_N5  &kp KP_N6  &none       &none
&kp LCTRL  &kp F1  &kp F2  &kp F3  &kp F4     &kp N3     &to 0                    &mmv MOVE_DOWN                   &mkp RCLK       &kp KP_N1        &kp KP_N2  &kp KP_N3  &kp KP_DOT  &trans
                           &to 0   &kp LSHFT  &kp SPACE                                                            &mkp LCLK       &mkp RCLK        &kp KP_N0
            >;

            label = "MINECR";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Minecr {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
